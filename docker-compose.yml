version: "3.9"

services:
  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7
    command: ["redis-server","--appendonly","yes"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  producer:
    build: ./producer
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  consumer:
    build: ./consumer
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  api:
    build: ./api
    env_file: .env
    environment:
      PORT: ${API_PORT}
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  producer-webhook:
    build:
      context: ./producer
      dockerfile: Dockerfile.webhook
    env_file: .env
    ports:
      - "${PRODUCER_WH_PORT}:${PRODUCER_WH_PORT}"
    depends_on:
      - rabbitmq
    restart: unless-stopped

  consumer-webhook:
    build:
      context: ./consumer
      dockerfile: Dockerfile.webhook
    env_file: .env
    depends_on:
      - rabbitmq
      - redis
    restart: unless-stopped
