version: "3.9"

services:
  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - "5672:5672"
      - "15672:15672"
    # No external env vars needed, uses defaults
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres:
    image: postgres:15
    env_file: .env # Only Postgres and Config-Server need the .env for bootstrap
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  config-server:
    build:
      context: .
      dockerfile: config-server/Dockerfile
    env_file: .env # For DB connection and the master key
    ports:
      - "8090:8090"
    environment:
      - PYTHONUNBUFFERED=1
      # Pass all necessary DB variables to the entrypoint script
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=app_pass
      - POSTGRES_DB=app_db
      # The master key is injected here and only here
      - CONFIG_ENCRYPTION_KEY=${CONFIG_ENCRYPTION_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/healthz"]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  producer:
    build:
      context: .
      dockerfile: ./producer/Dockerfile
    # env_file is removed. Config comes from config-server
    environment:
      - PYTHONUNBUFFERED=1
      - CONFIG_SERVER_URL=http://config-server:8090
    depends_on:
      config-server:
        condition: service_healthy # Wait for config-server to be fully ready
    restart: unless-stopped

  producer-webhook:
    build:
      context: .
      dockerfile: ./producer_webhook/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - CONFIG_SERVER_URL=http://config-server:8090
    depends_on:
      config-server:
        condition: service_healthy
    restart: unless-stopped

  consumer:
    build:
      context: .
      dockerfile: ./consumer/Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
      - CONFIG_SERVER_URL=http://config-server:8090
    depends_on:
      config-server:
        condition: service_healthy
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
      - CONFIG_SERVER_URL=http://config-server:8090
      # The port is now managed by config-server, but we still need to publish it
      - API_PORT=${API_PORT:-8080}
    ports:
      - "${API_PORT:-8080}:${API_PORT:-8080}"
    depends_on:
      config-server:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
